// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.5
// source: ethereum_service.proto

package etheservicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EthereumServiceClient is the client API for EthereumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthereumServiceClient interface {
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	GetLatestBlock(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (*GetLatestBlockResponse, error)
	VerifyAddress(ctx context.Context, in *VerifyAddressRequest, opts ...grpc.CallOption) (*VerifyAddressResponse, error)
}

type ethereumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEthereumServiceClient(cc grpc.ClientConnInterface) EthereumServiceClient {
	return &ethereumServiceClient{cc}
}

func (c *ethereumServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/ethereumservice.EthereumService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumServiceClient) GetLatestBlock(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (*GetLatestBlockResponse, error) {
	out := new(GetLatestBlockResponse)
	err := c.cc.Invoke(ctx, "/ethereumservice.EthereumService/GetLatestBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumServiceClient) VerifyAddress(ctx context.Context, in *VerifyAddressRequest, opts ...grpc.CallOption) (*VerifyAddressResponse, error) {
	out := new(VerifyAddressResponse)
	err := c.cc.Invoke(ctx, "/ethereumservice.EthereumService/VerifyAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthereumServiceServer is the server API for EthereumService service.
// All implementations must embed UnimplementedEthereumServiceServer
// for forward compatibility
type EthereumServiceServer interface {
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	GetLatestBlock(context.Context, *GetLatestBlockRequest) (*GetLatestBlockResponse, error)
	VerifyAddress(context.Context, *VerifyAddressRequest) (*VerifyAddressResponse, error)
	mustEmbedUnimplementedEthereumServiceServer()
}

// UnimplementedEthereumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEthereumServiceServer struct {
}

func (UnimplementedEthereumServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedEthereumServiceServer) GetLatestBlock(context.Context, *GetLatestBlockRequest) (*GetLatestBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlock not implemented")
}
func (UnimplementedEthereumServiceServer) VerifyAddress(context.Context, *VerifyAddressRequest) (*VerifyAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAddress not implemented")
}
func (UnimplementedEthereumServiceServer) mustEmbedUnimplementedEthereumServiceServer() {}

// UnsafeEthereumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthereumServiceServer will
// result in compilation errors.
type UnsafeEthereumServiceServer interface {
	mustEmbedUnimplementedEthereumServiceServer()
}

func RegisterEthereumServiceServer(s grpc.ServiceRegistrar, srv EthereumServiceServer) {
	s.RegisterService(&EthereumService_ServiceDesc, srv)
}

func _EthereumService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereumservice.EthereumService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumService_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumServiceServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereumservice.EthereumService/GetLatestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumServiceServer).GetLatestBlock(ctx, req.(*GetLatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumService_VerifyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumServiceServer).VerifyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethereumservice.EthereumService/VerifyAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumServiceServer).VerifyAddress(ctx, req.(*VerifyAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EthereumService_ServiceDesc is the grpc.ServiceDesc for EthereumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EthereumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereumservice.EthereumService",
	HandlerType: (*EthereumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _EthereumService_GetBalance_Handler,
		},
		{
			MethodName: "GetLatestBlock",
			Handler:    _EthereumService_GetLatestBlock_Handler,
		},
		{
			MethodName: "VerifyAddress",
			Handler:    _EthereumService_VerifyAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethereum_service.proto",
}
